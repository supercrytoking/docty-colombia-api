// require('isomorphic-fetch'); 
var Dropbox = require('dropbox').Dropbox;
const config = require('../config/config.json');
const jotformDropboxPath = config.dropbox.DropboxPath;
const JotAccessToken = config.dropbox.accessToken;
var dbx = new Dropbox({ accessToken: JotAccessToken });
const { bucket, awsBucket } = require("../commons/fileupload");
const { getSubmissionData } = require("../commons/jotform");
var fs = require('fs');
const http = require('https');
const db = require("../models");

async function getpdf(sid) {
  return dbx.filesListFolder({ path: `${jotformDropboxPath}/${sid}` })
    .then(function (response) {
      let res = response.result.entries[0];
      let link = res.path_display;
      return downloadFile(link, res.name, sid);
    })
    .catch(function (error) {
      console.log(error);
    });

  async function downloadFile(SHARED_LINK, name, sid) {
    return dbx.filesGetTemporaryLink({ path: SHARED_LINK })
      .then(function (data) {
        return sync(data.result.link, name, sid);
      })
      .catch(function (error) {
        console.error(error);
      });
  }
}

async function sync(link, name, sid) {
  console.log(link, name, sid);
  return new Promise((resolve, reject) => {
    const request = http.get(link, function (response) {
      bucket.upload({
        Bucket: awsBucket,
        Key: `jotform/${name}`,
        Body: response,
        ACL: 'public-read',
        ContentType: `application/pdf`
      }, async (err, resp) => {
        if (err) {
          console.log(err)
          return resolve(null);
        } else {
          await updateDocument(sid, resp.Location).catch(r => console.log(r));
          await dbx.filesDeleteV2({ path: `${jotformDropboxPath}/${sid}` }).catch(r => console.log(r));
          return resolve(resp.Location);
        }
      });
    });
  });
}

async function updateDocument(sid, path) {
  try {
    console.log(sid, path)
    let jotformData = await getSubmissionData(sid);
    let booking = null;
    if (!!jotformData) {
      jotformData = JSON.parse(JSON.stringify(jotformData));
      booking = await db.booking.findOne({ where: { reference_id: jotformData.consultationId } });
    }
    if (!!booking) {
      jotformData.user_id = booking.patient_id;
      jotformData.added_by = booking.provider_id;
    } else {
      jotformData.user_id = jotformData.patient_id;
      jotformData.added_by = jotformData.provider_id || null;
    }

    jotformData.pdfPath = path;
    await db.jotform.findOrCreate({ where: { submissionID: jotformData.submissionID } }).then(async () => {
      return await db.jotform.update(jotformData, { where: { submissionID: jotformData.submissionID } }).catch(console.log)
    });
    let obj = {
      user_id: jotformData.user_id,
      title: jotformData.title || `CONSULTATION_NOTE`,
      document_serial: sid,
      remark: `JOTFORM-${jotformData.formID} consultationId:${jotformData.consultationId}, generated by ${jotformData.added_by}`,
      family_id: jotformData.family_id,
      visible: true,
      issued_at: jotformData.createdAt,
      document_path: path,
      type: 'CONSULTATION_NOTE'
    };
    if (jotformData.patient_id) {
      obj.title = jotformData.title || 'MEDICAL_CERTIFICATE';
      obj.remark = `JOTFORM-${jotformData.formID} medical certificate`;
      obj.type = 'MEDICAL_CERTIFICATE';
    }
    return await db.user_document.findOrCreate({ where: { document_serial: sid } }).then(r => {
      return db.user_document.update(obj, { where: { document_serial: sid } })
    })
  } catch (error) {
    return Promise.reject();
  }
}

module.exports = {
  // getpdf: getpdf,
  dropboxCron() {
    dbx.filesListFolder({ path: `${jotformDropboxPath}` }).then(async resp => {
      let res = resp.result.entries;
      if (!!res && !!res.length) {
        for (let obj of res) {
          await getpdf(obj.name).catch(e => console.log(e));
        }
      }
    }).catch(err => {
      console.log(err);
    });
  }
};
// module.exports.dropboxCron();